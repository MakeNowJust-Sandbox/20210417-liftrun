{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"20210417-riftrun.806a57de.js","sourceRoot":"..","sourcesContent":["const app = document.querySelector<HTMLCanvasElement>('#app');\nconst width = 1280;\nconst height = 720;\nconst ctx = app.getContext('2d');\n\nconst line = (stroke: string, x1: number, y1: number, x2: number, y2: number): void => {\n  ctx.strokeStyle = stroke;\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.stroke();\n};\n\nconst rect = (stroke: string, x: number, y: number, w: number, h: number): void => {\n  ctx.strokeStyle = stroke;\n  ctx.beginPath();\n  ctx.rect(x, y, w, h);\n  ctx.stroke();\n};\n\nconst text = (fill: string, x: number, y: number, text: string, font: string): void => {\n  ctx.font = font;\n  ctx.fillStyle = fill;\n  ctx.fillText(text,x, y);\n};\n\nconst riftW = 50;\nconst riftH = 30;\nconst riftR = 200;\n\nconst boxW = 10;\nconst boxH = 10;\n\nconst LOCALSTORAGE_KEY = 'riftrun-highscore';\nlet high = +(localStorage.getItem(LOCALSTORAGE_KEY) ?? 0);\n\nlet started = false;\nlet t = 0;\nlet forceX = 0;\nlet selfX = 100;\nlet key: null | 'left' | 'right' = null;\nlet boxes: {x: number, y: number}[] = [];\n\nconst main = () => {\n  t += 1;\n  forceX += Math.sqrt(t / 300 + 1) * 2;\n\n  line('#aaa', 0, 420, width, 420);\n  rect('#aaa', selfX - 5 - forceX, 420 - 5, 10, 10);\n\n  for (let i = 0; i < 4; i++) {\n    const theta = (selfX + i * 90) / 180 * Math.PI;\n    const x = selfX + riftR * Math.cos(theta) - riftW / 2;\n    const y = 420 + riftR * Math.sin(theta) - riftH / 2;\n    line('#aaa', selfX - forceX, 420, x - forceX + riftW / 2, y + riftH / 2);\n    rect('#000', x - forceX, y, riftW, riftH);\n  }\n\n  let hit = false;\n  for (let i = 0; i < boxes.length; i++) {\n    const box = boxes[i];\n    rect('#d33', box.x - forceX, box.y, boxW, boxH);\n    for (let i = 0; i < 4; i++) {\n      const theta = (selfX + i * 90) / 180 * Math.PI;\n      const x = selfX + riftR * Math.cos(theta) - riftW / 2;\n      const y = 420 + riftR * Math.sin(theta) - riftH / 2;\n      if (x <= box.x && box.x <= x + riftW && y <= box.y && box.y <= y + riftH) {\n        hit = true;\n      }\n    }\n    if (hit) {\n      break;\n    }\n    if (box.x + boxW < forceX) {\n      boxes.splice(i--, 1);\n      continue;\n    }\n    box.x -= Math.sqrt(t / 300 + 1) * 12;\n  }\n\n  if (hit || selfX < forceX) { // Game over.\n    const score = (selfX - 100) / 100;\n    if (high < score) {\n      high = score;\n      localStorage.setItem(LOCALSTORAGE_KEY, high.toString());\n    }\n    started = false;\n    t = 0;\n    forceX = 0;\n    selfX = 100;\n    key = null;\n    boxes = [];\n  }\n\n  const highText = `HIGH: ${high.toFixed(1)} m`;\n  text('#444', width - highText.length * 16, height - 24, highText, '24px sans-serif');\n\n  if (!started) {\n    text('#000', 200, 200, 'RIFTRUN', '64px sans-serif');\n    text('#000', 200, 300, 'PRESS ← OR → KEY TO START', '64px sans-serif');\n    selfX += Math.sqrt(t / 300 + 1) * 2;\n    if (key) { // Start game.\n      started = true;\n      t = 0;\n      forceX = 0;\n      selfX = 100;\n      boxes = [];\n    }\n    return;\n  }\n\n  const score = (selfX - 100) / 100;\n  text('#444', 12, height - 24, `${score.toFixed(1)} m`, '24px sans-serif');\n\n  if (key === 'left') {\n    selfX -= Math.sqrt(t / 300 + 1) * 2 * 2 * ((1.5 ** -t) + 1);\n  }\n  if (key === 'right') {\n    selfX += Math.sqrt(t / 300 + 1) * 2 * 2 * ((1.5 ** -t) + 1);\n  }\n\n  if (Math.random() <= 0.01 + Math.sqrt(t / 3000000)) {\n    boxes.push({x: forceX + width, y: (420 - riftR) + Math.random() * riftR * 2 - boxH /2});\n  }\n};\n\napp.addEventListener('keydown', ev => {\n  if (ev.key === 'ArrowLeft') {\n    key = 'left';\n  }\n  if (ev.key === 'ArrowRight') {\n    key = 'right';\n  }\n});\n\napp.addEventListener('keyup', () => {\n  key = null;\n});\n\nsetInterval(() => {\n  ctx.clearRect(0, 0, width, height);\n  main();\n}, 1000/30);\n"]}